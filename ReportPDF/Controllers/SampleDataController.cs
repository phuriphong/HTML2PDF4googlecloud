using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using IronPdf;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using RestSharp;
using SCGEpur.Models;

namespace ReportPDF.Controllers
{
    [Route("api/[controller]")]
    public class SampleDataController : Controller
    {
        public SampleDataController(IHostingEnvironment env)
        {
            _env = env;

        }
        private static string[] Summaries = new[]
        {
            "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };
        private readonly IHostingEnvironment _env;

        [HttpGet("[action]")]
        public IEnumerable<WeatherForecast> WeatherForecasts()
        {
            var rng = new Random();
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                DateFormatted = DateTime.Now.AddDays(index).ToString("d"),
                TemperatureC = rng.Next(-20, 55),
                Summary = Summaries[rng.Next(Summaries.Length)]
            });
        }
        [HttpGet("[action]")]
        public async Task<IActionResult> Language()
        {
            IronPdf.HtmlToPdf Renderer = new IronPdf.HtmlToPdf();
            Renderer.PrintOptions.InputEncoding = System.Text.Encoding.UTF8;
            var PDF = Renderer.RenderUrlAsPdf("https://en.wikipedia.org/wiki/Arabic");
            byte[] data = PDF.BinaryData;

            return await Task.Run(async () => File(data, "application/pdf"));
        }
        [HttpGet("[action]")]
        public async Task<IActionResult> sssAsync()
        {
            //HtmlToPdf htmlToPdfConverter = new HtmlToPdf();

            //StringBuilder builder = new StringBuilder("ทดสอบ");

            ////for (int i = 0; i < param.Count; i++)
            ////{
            ////    builder.Append(param[i].Description);
            ////    builder.Append("</br>");
            ////    builder.Append("</br>");
            ////}
            //builder.Replace("{StartDate}", "ทดสอบการแทนค่า");
            //var OutputPath = "HtmlToPDF.pdf";
            //htmlToPdfConverter.ConvertHtmlToFile(builder.ToString(), null, OutputPath);

            string Mappath = Path.Combine(_env.WebRootPath, "template", "AgmReport");
            var Renderer = new IronPdf.HtmlToPdf();
            Renderer.PrintOptions.MarginTop = 10;  //millimeters
            Renderer.PrintOptions.MarginLeft = 10;  //millimeters
            Renderer.PrintOptions.MarginRight = 10;  //millimeters
            Renderer.PrintOptions.MarginBottom = 9;  //millimeters
            Renderer.PrintOptions.InputEncoding = System.Text.Encoding.UTF8;

            Renderer.PrintOptions.CustomCssUrl = "https://stackpath.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.css";


            StringBuilder head = new StringBuilder(System.IO.File.ReadAllText(Path.Combine(Mappath, "header.html")));
            var json = System.IO.File.ReadAllText(Path.Combine(Mappath, "data.json"));
            AgmHeader_Result H = (AgmHeader_Result)JsonConvert.DeserializeObject(json, typeof(AgmHeader_Result));
            var StartDateString = H.StartDate.ToString("d MMMM yyyy", new CultureInfo("th-TH", true));
            var EndDateString = H.EndDate.ToString("d MMMM yyyy", new CultureInfo("th-TH", true));
            head.Replace("{{header}}", string.Format("{0}  ({1} - {2})",
                H.StartDate.ToString("yyyy", new CultureInfo("th-TH", true)), StartDateString, EndDateString));
            head.Replace("{{AgmNo}}", H.AgmNo);
            head.Replace("{{DocDateString}}", H.DocDate.ToString("d MMMM yyyy", new CultureInfo("th-TH", true)));
            Renderer.PrintOptions.Header = new HtmlHeaderFooter()
            {
                Height = 50,
                Spacing = 0,
                //LoadStylesAndCSSFromMainHtmlDocument = true,
                HtmlFragment = head.ToString()
                //"<table style='width: 100 %;border:1px solid #d13b3b;'><tr><td style='width: 50 %;'><img src='data:image / png; base64,iVBORw0KGgoAAAANSUhEUgAAAnAAAABACAIAAAAVlN1wAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGxnSURBVHhe7b1nWBRbuy16f9z73HP22XuvtczkjBiQJCAgIBlBgkpGQMSIASMKIpgQMKGCWTGLmABzRFEUFCNBJRoAQWhC59zeUV1N2wK6MK7v27fHMx / onj1r5vmOd1TNqvq / PsohhxxyyCGHHD8MOaHKIYcccsghx0 + AnFDlkEMOOeSQ4ydATqhyyCGHHHLI8RMgJ1Q55Pj5EHVC8r0bJD8jwReTyCHHPw / JLP0XwL9INb6O30uoIpHwVYWI0vqRzxex2cKaGlFLi + SnH4PgzVtefr4QOcvxbwsajfb69euamhoGnS6J + vdER0fH0SNHVsUnnMs9x + FwJLEygGkoLytLWpu4ZfPm0pJSSey / G3g8Xn19fXV1VXV1NYVC + bewd98HoVDY0NBQW1PT2Nj4e5r59u1bLASUSPmyhcR6QZo3r18z6AxJ1M9GZUVF + ra0dWsTz5 / reSb / HqDoq5evxMeuOJ97jsViSWJ7B4FAUFdXh5788OGDJOpX4jcSKo3GOXyYtXqNsLGJvX8 / 79493vUbzBXxghcvJAl + AJxjmR0uY3lFRZLvcvwb4vLFS + GhYYG + fndu50ui / j0Ba + '></td>"
                //                + "<td style='width: 50 %;text-align: right;'> Page {page} of {total-pages}</td></tr></table>",
                //    //BaseUrl = new Uri(@"C:\assets\images\").AbsoluteUri
            };

            // Renderer.PrintOptions.Header.RightText = "Page {page} of {total-pages}";
            // Advanced:  Load external html assets: images, css and javascript.
            // An optional "base" asset locading path can be set as a url or local directory. 


            StringBuilder body = new StringBuilder(System.IO.File.ReadAllText(Path.Combine(Mappath, "body.html")));
            //ody.Replace("{{font}}", Path.Combine(_env.WebRootPath, "template", "AgmReport","angsa.woff"));
            if (H != null)
            {
                var RecordNumber = 1;
                body.Replace("{{SupplierName}}", H.SupplierName);
                body.Replace("{{SupplierCode}}", H.SupplierCode);
                var CatList = string.Join(",", H.AgmItem.Select(s => s.CateName).ToArray());
                body.Replace("{{CatList}}", CatList);
                if (H.AgmSelectedTab.CreditFlag)
                {
                    var CreditYear = H.AgmCredit.First().Year;
                    var CreditPeriod = H.AgmCredit.First().Period;
                    var CreditPeriodName = H.AgmCredit.First().PeriodName;
                    var NoofColumn = H.AgmCredit.First().NoofColumn;
                    StringBuilder table = new StringBuilder();
                    StringBuilder AgmCredit = new StringBuilder(System.IO.File.ReadAllText(Path.Combine(Mappath, "AgmCredit.html")));

                    AgmCredit.Replace("{{CreditYear}}", CreditYear);
                    AgmCredit.Replace("{{CreditPeriodName}}", CreditPeriodName);
                    AgmCredit.Replace("{{RecordNumber}}", (++RecordNumber).ToString());

                    table.Append("<table style='margin: 0 auto;' class='table2' ><tr>    " +
                        "<th style='width: 30px;text-align:  center' class='align-middle'>#</th>" +
                        "<th style='width: 150px;text-align:  center' class='align-middle'>Item Category </th>" +
                        "<th style='width: 150px;text-align:  center' class='align-middle'>Item Sub Category </th>" +
                             "{{header}}</tr>{{detail}}</table>");
                    var header = new StringBuilder();
                    if (CreditPeriod == "M")
                    {
                        foreach (var row in new string[] { "Jan", "Feb", "Mar", "Apr", "May", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" })
                        {
                            header.AppendFormat("<th style='width: 100px; text-align: center'>{0}</th>", row);
                        }
                    }
                    else if (CreditPeriod == "Q")
                    {

                        header.AppendFormat("<th style='width: 100px; text-align: center'>{0}</th>", "ไตรมาสที่ 1");
                        header.AppendFormat("<th style='width: 100px; text-align: center'>{0}</th>", "ไตรมาสที่ 2");
                        header.AppendFormat("<th style='width: 100px; text-align: center'>{0}</th>", "ไตรมาสที่ 3");
                        header.AppendFormat("<th style='width: 100px; text-align: center'>{0}</th>", "ไตรมาสที่ 4");

                    }
                    else if (CreditPeriod == "H")
                    {

                        header.AppendFormat("<th style='width: 100px; text-align: center'>{0}</th>", "Jan-Jun");
                        header.AppendFormat("<th style='width: 100px; text-align: center'>{0}</th>", "Jul-Dec");

                    }
                    else if (CreditPeriod == "Y")
                    {

                        header.AppendFormat("<th style='width: 100px; text-align: center'>{0}</th>", "Jan-Dec");

                    }
                    else
                    {
                        for (int i = 1; i <= NoofColumn; i++)
                        {
                            header.AppendFormat("<th style='width: 100px; text-align: center'>{0}</th>", i);
                        }
                    }
                    table.Replace("{{header}}", header.ToString());
                    var detail = new StringBuilder();
                    var no = 1;
                    foreach (var item in H.AgmCredit)
                    {
                        detail.Append("<tr>");
                        detail.AppendFormat("<td class='text-center'>{0}</td>", no++);
                        detail.AppendFormat("<td class='text-left'>{0}</td>", item.CategoryName);
                        detail.AppendFormat("<td class='text-left'>{0}</td>", item.SubCategoryName);
                        for (int i = 1; i <= NoofColumn; i++)
                        {
                            var obj = item.GetType().GetProperty("Value" + i).GetValue(item, null);

                            detail.AppendFormat("<td class='text-right'>{0:#,##0.00}</td>", obj);
                        }
                        detail.Append("</tr>");
                    }
                    table.Replace("{{detail}}", detail.ToString());
                    AgmCredit.Replace("{{AgmCreditTable}}", table.ToString());
                    body.Replace("{{AgmCredit}}", AgmCredit.ToString());

                }
                else
                {
                    body.Replace("{{AgmCredit}}", "");
                }
                if (H.AgmSelectedTab.RebateFlag)
                {
                    var rebatelist = new StringBuilder();
                    StringBuilder AgmRebate = new StringBuilder(
                        @"<div class='row'>
                          <br>
                         </div>
                        <div class='row'>
                            <div class='col-sm-12'>
                                <label class='font-weight-bold'>{{RecordNumber}}. อัตราผลประโยชน์(Rebate)</label>
                            </div>

                        </div>
                    {{AgmRebateRow}}");


                    AgmRebate.Replace("{{RecordNumber}}", (++RecordNumber).ToString());
                    var rebateNo = 1;

                    foreach (var row in H.AgmRebate)
                    {
                        var AgmRebateRow = new StringBuilder(System.IO.File.ReadAllText(Path.Combine(Mappath, "AgmRebate.html")));
                        AgmRebateRow.Replace("{{CalByName}}", row.CalByName);
                        AgmRebateRow.Replace("{{PeriodName}}", row.PeriodName);
                        AgmRebateRow.Replace("{{PaymentMethodName}}", row.PaymentMethodName);

                        AgmRebateRow.Replace("{{row1}}", row.RebateType == "NT" ?
                            string.Format("{0}.{1} {2}", RecordNumber, rebateNo, row.RebateTypeName) :
                            string.Format("{0}.{1} อัตราตามเป้าหมาย", RecordNumber, rebateNo));
                        rebateNo++;
                        AgmRebateRow.Replace("{{row2}}", row.RebateType == "NT" ? string.Format("{0} {1} (นับจากบาทแรก)",
                            row.RebateStep.First().TargetAmount.Value.ToString("#,##0.00"), row.Unit) : row.RebateTypeName);

                        var subNo = 1;
                        var subdetail = new StringBuilder();
                        foreach (var item in H.AgmItem)
                        {
                            var dd = new StringBuilder("<tr><td class='text-center'>{{sub.No}}</td><td>{{sub.CateName}}</td><td>{{sub.SubCateName}}</td></tr>");
                            dd.Replace("{{sub.No}}", (subNo++).ToString());
                            dd.Replace("{{sub.CateName}}", item.CateName);
                            dd.Replace("{{sub.SubCateName}}", item.SubCateName);
                            subdetail.Append(dd);
                        }
                        AgmRebateRow.Replace("{{Subitem}}", subdetail.ToString());
                        if (row.RebateType != "NT")
                        {
                            subNo = 1;
                            StringBuilder bodystep = new StringBuilder();
                            var AgmRebateStep = new StringBuilder(System.IO.File.ReadAllText(Path.Combine(Mappath, "AgmRebateStep.html")));
                            foreach (var item in row.RebateStep)
                            {
                                var dd = new StringBuilder("<tr><td class='text-center'>{{step.No}}</td><td class='text-right'>{{step.StepAmount}}</td><td class='text-right'>{{step.TargetAmount}}</td></tr>");
                                dd.Replace("{{step.No}}", (subNo++).ToString());
                                dd.Replace("{{step.StepAmount}}", string.Format("{0:#,##.0}", item.StepAmount));
                                dd.Replace("{{step.TargetAmount}}", string.Format("{0:#,##.0}", item.TargetAmount));
                                bodystep.Append(dd);
                            }
                            AgmRebateStep.Replace("{{body}}", bodystep.ToString());
                            AgmRebateRow.Replace("{{AgmRebateStep}}", AgmRebateStep.ToString());
                        }
                        else
                        {
                            AgmRebateRow.Replace("{{AgmRebateStep}}", "");
                        }
                        rebatelist.Append(AgmRebateRow.ToString());
                    }
                    AgmRebate.Replace("{{AgmRebateRow}}", rebatelist.ToString());
                    body.Replace("{{AgmRebate}}", AgmRebate.ToString());
                }
                else
                {
                    body.Replace("{{AgmRebate}}", "");
                }
                if (H.AgmSelectedTab.MarketingFeeFlag)
                {
                    var AgmMarketingFee = new StringBuilder(
                        @"
                   <div class='row' >
                    <div class='col-sm-12'>
                        <label class='font-weight-bold' >{{RecordNumber}}. ค่าสนับสนุนกิจกรรมส่งเสริมการขาย(Marketing Fee)</label>
                    </div>
                   </div>
                {{AgmMarketingFeeItem}}");
                    var AgmMarketingFeeItemList = new StringBuilder();
                    AgmMarketingFee.Replace("{{RecordNumber}}", (++RecordNumber).ToString());
                    var MaNO = 1;
                    foreach (var row in H.AgmMarketingFee)
                    {
                        var AgmMarketingFeeItem = new StringBuilder(System.IO.File.ReadAllText(Path.Combine(Mappath, "AgmMarketingFee.html")));
                        AgmMarketingFeeItem.Replace("{{RecordNumber}}", (RecordNumber).ToString());
                        AgmMarketingFeeItem.Replace("{{row.No}}", (MaNO++).ToString());
                        AgmMarketingFeeItem.Replace("{{row.Description}}", row.Description);
                        AgmMarketingFeeItem.Replace("{{row.Unit}}", row.Unit);
                        AgmMarketingFeeItem.Replace("{{row.CalByName}}", row.CalByName);
                        AgmMarketingFeeItem.Replace("{{row.PeriodName}}", row.PeriodName);
                        AgmMarketingFeeItem.Replace("{{row.PaymentMethodName}}", row.PaymentMethodName);

                        AgmMarketingFeeItem.Replace("{{row.TargetAmount}}", string.Format(row.SupType == "Percent" ? "{0:#,##0}" : "{0:#,##0.00}", row.TargetAmount));
                        AgmMarketingFeeItem.Replace("{{row.SupAmount}}", string.Format(row.SupType == "Percent" ? "{0:#,##0}" : "{0:#,##0.00}", row.SupAmount));

                        AgmMarketingFeeItemList.Append(AgmMarketingFeeItem);
                    }
                    AgmMarketingFee.Replace("{{AgmMarketingFeeItem}}", AgmMarketingFeeItemList.ToString());
                    body.Replace("{{AgmMarketingFee}}", AgmMarketingFee.ToString());
                }
                else
                {
                    body.Replace("{{AgmMarketingFee}}", "");
                }
                if (H.AgmSelectedTab.DCChargeFlag)
                {
                    var AgmDCCharge = new StringBuilder(System.IO.File.ReadAllText(Path.Combine(Mappath, "AgmDCCharge.html")));
                    AgmDCCharge.Replace("{{RecordNumber}}", (++RecordNumber).ToString());
                    AgmDCCharge.Replace("{{CalByName}}", H.AgmDCCharge.CalByName);
                    AgmDCCharge.Replace("{{Unit}}", H.AgmDCCharge.Unit);
                    AgmDCCharge.Replace("{{PeriodName}}", H.AgmDCCharge.PeriodName);
                    AgmDCCharge.Replace("{{PaymentMethodName}}", H.AgmDCCharge.PaymentMethodName);
                    AgmDCCharge.Replace("{{Note}}", H.AgmDCCharge.Note);
                    AgmDCCharge.Replace("{{SupAmount}}", string.Format(H.AgmDCCharge.SupType == "Percent" ? "{0:#,##0}" : "{0:#,##0.00}", H.AgmDCCharge.SupAmount));

                    body.Replace("{{AgmDCCharge}}", AgmDCCharge.ToString());
                }
                else
                {
                    body.Replace("{{AgmDCCharge}}", "");
                }
                if (H.AgmSelectedTab.DamageFlag)
                {
                    var AgmDamage = new StringBuilder(System.IO.File.ReadAllText(Path.Combine(Mappath, "AgmDamage.html")));
                    AgmDamage.Replace("{{RecordNumber}}", (++RecordNumber).ToString());
                    AgmDamage.Replace("{{CalByName}}", H.AgmDamage.CalByName);
                    AgmDamage.Replace("{{Unit}}", H.AgmDamage.Unit);
                    AgmDamage.Replace("{{Note}}", H.AgmDamage.Note);
                    AgmDamage.Replace("{{SupAmount}}", string.Format(H.AgmDamage.SupType == "Percent" ? "{0:#,##0}" : "{0:#,##0.00}", H.AgmDamage.SupAmount));

                    body.Replace("{{AgmDamage}}", AgmDamage.ToString());
                }
                else
                {
                    body.Replace("{{AgmDamage}}", "");
                }
                StringBuilder ListOther = new StringBuilder();
                if (H.AgmSelectedTab.CustomizeFlag || H.AgmSelectedTab.NewStoreFlag
                    || H.AgmSelectedTab.NewProductFlag || H.AgmSelectedTab.CreditTermFlag)
                {
                    if (H.AgmSelectedTab.CustomizeFlag)
                    {
                        foreach (var item in H.AgmOther.Where(x => x.OtherType == "Customize"))
                        {

                            var CustomizeTem = new StringBuilder(@"<div class='row'>
                                            <br >
                                            </div >
                                            <div class='row' >
                                            <div class='col-sm-12'>
                                                <label class='font-weight-bold ' style='word-wrap: break-word;' >{{RecordNumber}}. {{Description}}</label>
                                            </div>
                                        </div>
                                        <div class='row' >
                                            <div class='col-sm-1 text-right'>
                                            </div>
                                            <div class='col-sm-11'>
                                              <div class='row'>
                                                <div class='col-sm-4'><label class='font-weight-bold'> อัตราค่าบริการศูนย์กระจายสินค้า</label></div>
                                                <div class='col-sm-2' >{{SupAmount}}  {{Unit}}</div>
                                                <div class='col-sm-2'><label class='font-weight-bold'> คำนวณจาก</label></div>
                                                <div class='col-sm-2'>{{CalByName}}</div>
                                              </div>
                                            </div>
                                          </div>
                                          <div class='row' >
                                            <div class='col-sm-1 text-right'>
     
                                            </div>
                                            <div class='col-sm-11'>
                                              <div class='row'>
                                                <div class='col-sm-4'><label class='font-weight-bold'> วิธีการจ่ายชำระ-ผลประโยชน์</label></div>
                                                <div class='col-sm-6'>{{PaymentMethodName}}</div>
                                              </div>
                                            </div>
                                          </div>");
                            CustomizeTem.Replace("{{RecordNumber}}", (++RecordNumber).ToString());
                            CustomizeTem.Replace("{{CalByName}}", item.CalByName);
                            CustomizeTem.Replace("{{Unit}}", item.Unit);
                            CustomizeTem.Replace("{{Description}}", item.Description);
                            CustomizeTem.Replace("{{PaymentMethodName}}", item.PaymentMethodName);
                            CustomizeTem.Replace("{{SupAmount}}", string.Format(item.SupType == "Percent" ? "{0:#,##0}" : "{0:#,##0.00}", item.SupAmount));
                            ListOther.Append(CustomizeTem.ToString());
                        }
                    }
                    if (H.AgmSelectedTab.NewProductFlag || H.AgmSelectedTab.CreditTermFlag || H.AgmSelectedTab.NewStoreFlag)
                    {
                        foreach (var item in H.AgmOther.Where(x => x.OtherType != "Customize"))
                        {

                            StringBuilder otherTem = null;
                            switch (item.OtherType)
                            {
                                case "Store": otherTem = new StringBuilder(@"<div class='row'>
                                            <br >
                                            </div >
                                            <div class='row' >
                                            <div class='col-sm-12'>
                                                <label class='font-weight-bold ' style='word-wrap: break-word;' >{{RecordNumber}}. ส่วนลดสำหรับเปิดสาขาใหม่ (Discout for New Store Opening)</label>
                                            </div>
                                        </div>
                                            <div class='row' >
                                            <div class='col-sm-1 text-right'>
                                           </div>
                                           <div class='col-sm-11'>
                                             <div class='row'>
                                               <div class='col-sm-1'><label class='font-weight-bold'>เงื่อนไข</label></div>
                                               <div class='col-sm-11 ' style='word-wrap: break-word;'>{{Description}}</div>
                                              </div>
                                            </div>
                                          </div>
                                        <div class='row' >
                                            <div class='col-sm-1 text-right'>
                                            </div>
                                            <div class='col-sm-11'>
                                              <div class='row'>
                                                <div class='col-sm-4'><label class='font-weight-bold'> อัตราค่าบริการศูนย์กระจายสินค้า</label></div>
                                                <div class='col-sm-2' >{{SupAmount}}  {{Unit}}</div>
                                                <div class='col-sm-2'><label class='font-weight-bold'> คำนวณจาก</label></div>
                                                <div class='col-sm-2'>{{CalByName}}</div>
                                              </div>
                                            </div>
                                          </div>
                                          <div class='row' >
                                            <div class='col-sm-1 text-right'>
     
                                            </div>
                                            <div class='col-sm-11'>
                                              <div class='row'>
                                                <div class='col-sm-4'><label class='font-weight-bold'> วิธีการจ่ายชำระ-ผลประโยชน์</label></div>
                                                <div class='col-sm-6'>{{PaymentMethodName}}</div>
                                              </div>
                                            </div>
                                          </div>"); break;
                                case "Prod": otherTem = new StringBuilder(@"<div class='row'>
                                            <br >
                                            </div >
                                            <div class='row' >
                                            <div class='col-sm-12'>
                                                <label class='font-weight-bold ' style='word-wrap: break-word;' >{{RecordNumber}}. ส่วนลดสำหรับสินค้าใหม่ (Discount for New Products)</label>
                                            </div>
                                        </div>
                                        <div class='row' >
                                            <div class='col-sm-1 text-right'>
                                            </div>
                                            <div class='col-sm-11'>
                                              <div class='row'>
                                                <div class='col-sm-4'><label class='font-weight-bold'> อัตราค่าบริการศูนย์กระจายสินค้า</label></div>
                                                <div class='col-sm-2' >{{SupAmount}}  {{Unit}}</div>
                                                <div class='col-sm-2'><label class='font-weight-bold'> คำนวณจาก</label></div>
                                                <div class='col-sm-2'>{{CalByName}}</div>
                                              </div>
                                            </div>
                                          </div>
                                          <div class='row' >
                                            <div class='col-sm-1 text-right'>
     
                                            </div>
                                            <div class='col-sm-11'>
                                              <div class='row'>
                                                <div class='col-sm-4'><label class='font-weight-bold'> วิธีการจ่ายชำระ-ผลประโยชน์</label></div>
                                                <div class='col-sm-6'>{{PaymentMethodName}}</div>
                                              </div>
                                            </div>
                                          </div>"); break;
                                case "CreditTerm": otherTem = new StringBuilder(@"<div class='row'>
                                            <br >
                                            </div >
                                            <div class='row' >
                                            <div class='col-sm-12'>
                                                <label class='font-weight-bold ' style='word-wrap: break-word;' >{{RecordNumber}}. เครดิตพิเศษ</label>
                                            </div>
                                        </div>
                                        <div class='row'>
                                            <div class='col-sm-1 text-right'>
     
                                            </div>
                                            <div class='col-sm-11'>
                                              <div class='row'>
                                                <div class='col-sm-2'><label class='font-weight-bold'>เครดิตปกติ</label></div>
                                                <div class='col-sm-2 text-right'>{{OldCreditTerm}} วัน</div>
       
                                              </div>

                                            </div>
                                          </div>
                                          <div class='row' >
                                            <div class='col-sm-1 text-right'>
     
                                            </div>
                                            <div class='col-sm-11'  >
                                              <div class='row' >
                                                <div class='col-sm-2'><label class='font-weight-bold'>เครดิตพิเศษ</label></div>
                                                <div class='col-sm-2 text-right'>{{NewCreditTerm}} วัน</div>
       
                                              </div>

                                            </div>
                                          </div>"); break;
                                default:
                                    break;
                            }

                            otherTem.Replace("{{RecordNumber}}", (++RecordNumber).ToString());
                            otherTem.Replace("{{CalByName}}", item.CalByName);
                            otherTem.Replace("{{OldCreditTerm}}", string.Format("{0:#,##0}", item.OldCreditTerm));
                            otherTem.Replace("{{NewCreditTerm}}", string.Format("{0:#,##0}", item.NewCreditTerm));
                            otherTem.Replace("{{Unit}}", item.Unit);
                            otherTem.Replace("{{Description}}", item.Description);
                            otherTem.Replace("{{PaymentMethodName}}", item.PaymentMethodName);
                            otherTem.Replace("{{SupAmount}}", string.Format(item.SupType == "Percent" ? "{0:#,##0}" : "{0:#,##0.00}", item.SupAmount));
                            ListOther.Append(otherTem.ToString());
                        }
                    }
                    body.Replace("{{AgmOther}}", ListOther.ToString());
                }
                else
                {
                    body.Replace("{{AgmOther}}", "");
                }
                var Footer = new StringBuilder(System.IO.File.ReadAllText(Path.Combine(Mappath, "Footer.html")));
                var Signer = "1";
                var AgmSignatureSCG = H.AgmSignature.First(x => (!x.VendorFlag && x.SignatureType == Signer));
                var AgmSignatureVendor = H.AgmSignature.First(x => (x.VendorFlag && x.SignatureType == Signer));
                Footer.Replace("{{SignatureSCGName}}", AgmSignatureSCG.Name);
                Footer.Replace("{{SignatureSCGPosition}}", AgmSignatureSCG.Position);
                Footer.Replace("{{SignatureVendorName}}", AgmSignatureVendor.Name);
                Footer.Replace("{{SignatureVendorPosition}}", AgmSignatureVendor.Position);

                StringBuilder ListWitness = new StringBuilder();
                foreach (var item in H.AgmSignature.Where(x => x.VendorFlag && x.SignatureType != Signer))
                {

                    var s = new StringBuilder(@" <div class='row'>
                      <br >
                    </div ><div class='row'>
                                            <div class='col-sm-3'></div>
                                            <div class='col-sm-6 text-center'>
                                                <span class='font-weight-bold'>________________________</span>
                                            </div>
                                            <div class='col-sm-3'></div>
                                        </div>
                                        <div class='row'>
                                            <div class='col-sm-3'></div>
                                            <div class='col-sm-6  text-center'>
                                                <span class='font-weight-bold'>( {{Name}} )</span>
                                            </div>
                                            <div class='col-sm-3'></div>
                                        </div>
                                        <div class='row'>
                                            <div class='col-sm-3'></div>
                                            <div class='col-sm-6  text-center'>
                                                <span class='font-weight-bold'>{{Position}}</span>
                                            </div>
                                            <div class='col-sm-3'></div>
                                        </div>
                                        <div class='row'>
                                            <div class='col-sm-3'></div>
                                            <div class='col-sm-6 text-center'>
                                                <span class='font-weight-bold'>วันที่ ____________________</span>
                                            </div>
                                            <div class='col-sm-3'></div>
                                        </div>
                                        <div class='row'>
                                            <br>
                                        </div>");
                    s.Replace("{{Name}}", item.Name);
                    s.Replace("{{Position}}", item.Position);
                    ListWitness.Append(s);
                }
                Footer.Replace("{{WitnessSCG}}", ListWitness.ToString());
                ListWitness = new StringBuilder();
                foreach (var item in H.AgmSignature.Where(x => !x.VendorFlag && x.SignatureType != Signer))
                {

                    var s = new StringBuilder(@" <div class='row'>
                      <br >
                    </div ><div class='row'>
                                            <div class='col-sm-3'></div>
                                            <div class='col-sm-6 text-center'>
                                                <span class='font-weight-bold'>________________________</span>
                                            </div>
                                            <div class='col-sm-3'></div>
                                        </div>
                                        <div class='row'>
                                            <div class='col-sm-3'></div>
                                            <div class='col-sm-6  text-center'>
                                                <span class='font-weight-bold'>( {{Name}} )</span>
                                            </div>
                                            <div class='col-sm-3'></div>
                                        </div>
                                        <div class='row'>
                                            <div class='col-sm-3'></div>
                                            <div class='col-sm-6  text-center'>
                                                <span class='font-weight-bold'>{{Position}}</span>
                                            </div>
                                            <div class='col-sm-3'></div>
                                        </div>
                                        <div class='row'>
                                            <div class='col-sm-3'></div>
                                            <div class='col-sm-6 text-center'>
                                                <span class='font-weight-bold'>วันที่ ____________________</span>
                                            </div>
                                            <div class='col-sm-3'></div>
                                        </div>
                                        <div class='row'>
                                            <br>
                                        </div>");
                    s.Replace("{{Name}}", item.Name);
                    s.Replace("{{Position}}", "พยาน");
                    ListWitness.Append(s);

                }
                Footer.Replace("{{WitnessVendor}}", ListWitness.ToString());
                body.Replace("{{Footer}}", Footer.ToString());

            }
            var PDF = Renderer.RenderHtmlAsPdf(body.ToString());
            //var  = Renderer.RenderHtmlAsPdf("<div class='container-fluid'> <div class='row'> <div class='col-md-12'> <nav class='navbar navbar-expand-lg navbar-light bg-light'> <button class='navbar-toggler' type='button' data-toggle='collapse' data-target='#bs-example-navbar-collapse-1'> <span class='navbar-toggler-icon'></span> </button> <a class='navbar-brand' href='#'>Brand</a> <div class='collapse navbar-collapse' id='bs-example-navbar-collapse-1'> <ul class='navbar-nav'> <li class='nav-item active'> <a class='nav-link' href='#'>Link<span class='sr-only'>(current)</span></a> </li> <li class='nav-item'> <a class='nav-link' href='#'>Link</a> </li> <li class='nav-item dropdown'> <a class='nav-link dropdown-toggle' href='http://example.com' id='navbarDropdownMenuLink' data-toggle='dropdown'>Dropdown link</a> <div class='dropdown-menu' aria-labelledby='navbarDropdownMenuLink'> <a class='dropdown-item' href='#'>Action</a> <a class='dropdown-item' href='#'>Another action</a> <a class='dropdown-item' href='#'>Something else here</a> <div class='dropdown-divider'> </div> <a class='dropdown-item' href='#'>Separated link</a> </div> </li> </ul> <form class='form-inline'> <input class='form-control mr-sm-2' type='text' /> <button class='btn btn-primary my-2 my-sm-0' type='submit'> Search </button> </form> <ul class='navbar-nav ml-md-auto'> <li class='nav-item active'> <a class='nav-link' href='#'>Link<span class='sr-only'>(current)</span></a> </li> <li class='nav-item dropdown'> <a class='nav-link dropdown-toggle' href='http://example.com' id='navbarDropdownMenuLink' data-toggle='dropdown'>Dropdown link</a> <div class='dropdown-menu dropdown-menu-right' aria-labelledby='navbarDropdownMenuLink'> <a class='dropdown-item' href='#'>Action</a> <a class='dropdown-item' href='#'>Another action</a> <a class='dropdown-item' href='#'>Something else here</a> <div class='dropdown-divider'> </div> <a class='dropdown-item' href='#'>Separated link</a> </div> </li> </ul> </div> </nav> <div class='jumbotron'> <h2> Hello, world! </h2> <p> This is a template for a simple marketing or informational website.It includes a large callout called the hero unit and three supporting pieces of content. Use it as a starting point to create something more unique. </p> <p> <a class='btn btn-primary btn-large' href='#'>Learn more</a> </p> </div> </div> </div> <div class='row'> <div class='col-md-4'> <h2> Heading </h2> <p> Donec id elit non mi porta gravida at eget metus.Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.Etiam porta sem malesuada magna mollis euismod.Donec sed odio dui. </p> <p> <a class='btn' href='#'>View details »</a> </p> </div> <div class='col-md-4'> <h2> Heading </h2> <p> Donec id elit non mi porta gravida at eget metus.Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.Etiam porta sem malesuada magna mollis euismod.Donec sed odio dui. </p> <p> <a class='btn' href='#'>View details »</a> </p> </div> <div class='col-md-4'> <h2> Heading </h2> <p> Donec id elit non mi porta gravida at eget metus.Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.Etiam porta sem malesuada magna mollis euismod.Donec sed odio dui. </p> <p> <a class='btn' href='#'>View details »</a> </p> </div> </div> </div>");
            //var PDF = Renderer.RenderUrlAsPdf(new Uri("https://www.layoutit.com/build"));
            //var PDF = Renderer.RenderHtmlAsPdf(
            //    " <table style='width: 100 %;height: 2000px;border:1px solid #d13b3b;'> <thead> <tr> <th> # </th> <th> Product </th> <th> Payment Taken </th> <th> Status </th> </tr> </thead> <tbody> <tr> <td> 1 </td> <td> TB - Monthly </td> <td> 01/04/2012 </td> <td> Default </td> </tr> <tr class='table - active'> <td> 1 </td> <td> TB - Monthly </td> <td> 01/04/2012 </td> <td> Approved </td> </tr> <tr class='table - success'> <td> 2 </td> <td> TB - Monthly </td> <td> 02/04/2012 </td> <td> Declined </td> </tr> <tr class='table - warning'> <td> 3 </td> <td> TB - Monthly </td> <td> 03/04/2012 </td> <td> Pending </td> </tr> <tr class='table - danger'> <td> 4 </td> <td> TB - Monthly </td> <td> 04/04/2012 </td> <td> Call in to confirm </td> </tr> </tbody> </table>");
            ////PDF.SaveAs(OutputPath);
            //byte[] data = htmlToPdfConverter.ConvertHtmlToMemory(builder.ToString(), null);


            byte[] data = PDF.BinaryData;

            return await Task.Run(async () => File(data, "application/pdf"));
        }
        [HttpGet("[action]")]
        public async Task<ActionResult> contractAsync()
        {
            try
            {
                string Mappath = Path.Combine(_env.WebRootPath, "template", "AgmReport");
                StringBuilder head = new StringBuilder(System.IO.File.ReadAllText(Path.Combine(Mappath, "contract.html")));

                //StringBuilder head = new StringBuilder("<span>1</span>");
                //HiQPdf.HtmlToPdf htmlToPdfConverter = new HiQPdf.HtmlToPdf();

                //var doc = htmlToPdfConverter.Document;
                //var magin = new HiQPdf.PdfMargins();
                //magin.Top = 20;
                //magin.Left = 20;
                //magin.Right = 20;
                //magin.Bottom = 30;
                //htmlToPdfConverter.Document.Margins = magin;  //millimeters
                //                                              //  string baseUrl = string.Concat(Request.Scheme, "://", Request.Host);
                //byte[] data = htmlToPdfConverter.ConvertHtmlToMemory(head.ToString(), null);

                byte[] data = new ReportPDF.Model.ExpertPdf().pdf(head);

                return await Task.Run(async () => File(data, "application/pdf"));
            }
            catch (Exception ex)
            {
                return Ok(new { IsDone = false, ex.Message, ex });
            }


        }
        [HttpGet("[action]")]
        public FileResult angsa()
        {

            string Mappath = Path.Combine(_env.WebRootPath, "template", "AgmReport");
            var fileBytes = (System.IO.File.ReadAllBytes(Path.Combine(Mappath, "angsa.woff")));
            return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, "angsa.woff");
        }
        [HttpPost("[action]")]
        public async Task<IActionResult> CallApi([FromBody]restmodel model)
        {
            try
            {
                var client = new RestClient(model.Url);
                var request = new RestRequest(model.Method);
                request.AddParameter("application/x-www-form-urlencoded", model.Data, ParameterType.RequestBody);
                IRestResponse response = await client.ExecuteAsync(request);
                {
                    return Ok(new { response.Content, response = response });
                }

            }
            catch (Exception ex)
            {
                return Ok(new { IsDone = false, ex });
            }


        }

        [HttpPost("AB/[action]")]
        public ActionResult tttt([FromBody]restmodel model)
        {
            try
            {
                var client = new RestClient(model.Url);
                var request = new RestRequest(model.Method);
                var body = model.Data;
                request.AddParameter("application/x-www-form-urlencoded", body, ParameterType.RequestBody);
                IRestResponse response = client.Execute(request);
                {
                    return Ok(new { response.Content, response = response });
                }

            }
            catch (Exception ex)
            {
                return Ok(new { IsDone = false, ex });
            }


        }

        [HttpPost("[action]")]
        public async Task<IActionResult> PostData([FromBody]restmodel model)
        {
            try
            {
                var dict = new Dictionary<string, string>();
                dict.Add("grant_type", "authorization_code");
                dict.Add("client_id", "039bb643-891d-4abd-846d-a38c2e89adad");
                dict.Add("redirect_uri", "https://test-scgdistpurchasing.nexterdigitals-dev.com/login");
                dict.Add("code", model.Code);
                var client = new HttpClient();
                var req = new HttpRequestMessage(HttpMethod.Post, model.Url) { Content = new FormUrlEncodedContent(dict) };
                var res = await client.SendAsync(req);
                return Ok(res.Content.ReadAsStringAsync().Result);
            }
            catch (WebException we)
            {
                throw new Exception(we.Message);
            }
            catch (Exception ex)
            {
                return Ok(new { IsDone = false, ex });
            }


        }


        public class WeatherForecast
        {
            public string DateFormatted { get; set; }
            public int TemperatureC { get; set; }
            public string Summary { get; set; }

            public int TemperatureF
            {
                get
                {
                    return 32 + (int)(TemperatureC / 0.5556);
                }
            }
        }
    }
}
